#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Google API Rotation System
Sistema de rota√ß√£o de APIs para evitar rate limits
"""

import logging
import time
import json
import os
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class GoogleAPIRotation:
    """Sistema de rota√ß√£o de APIs do Google Search"""

    def __init__(self):
        """Inicializa sistema de rota√ß√£o"""
        self.api_keys = self._load_api_keys()
        self.current_key_index = 0
        self.key_usage = {}  # Tracking de uso por chave
        self.daily_reset_time = None
        self.max_requests_per_key = 100  # Limite di√°rio por chave
        self.cooldown_period = 3600  # 1 hora de cooldown se limite atingido

        self._initialize_usage_tracking()

        logger.info(f"Google API Rotation inicializado com {len(self.api_keys)} chaves")

    def _load_api_keys(self) -> List[Dict[str, str]]:
        """Carrega chaves de API do Google"""
        api_keys = []

        # Carrega chaves do ambiente
        google_keys = [
            {
                'api_key': os.getenv('GOOGLE_SEARCH_API_KEY'),
                'cx': os.getenv('GOOGLE_SEARCH_CX'),
                'name': 'primary'
            },
            {
                'api_key': os.getenv('GOOGLE_SEARCH_API_KEY_2'),
                'cx': os.getenv('GOOGLE_SEARCH_CX_2'),
                'name': 'secondary'
            },
            {
                'api_key': os.getenv('GOOGLE_SEARCH_API_KEY_3'),
                'cx': os.getenv('GOOGLE_SEARCH_CX_3'),
                'name': 'tertiary'
            }
        ]

        # Filtra chaves v√°lidas
        for key_config in google_keys:
            if key_config['api_key'] and key_config['cx']:
                api_keys.append(key_config)

        # Se n√£o h√° chaves, cria uma configura√ß√£o padr√£o
        if not api_keys:
            default_key = os.getenv('GOOGLE_API_KEY')
            default_cx = os.getenv('GOOGLE_CX')

            if default_key and default_cx:
                api_keys.append({
                    'api_key': default_key,
                    'cx': default_cx,
                    'name': 'default'
                })

        return api_keys

    def _initialize_usage_tracking(self):
        """Inicializa tracking de uso"""
        current_date = datetime.now().date()

        for i, key_config in enumerate(self.api_keys):
            key_name = key_config['name']
            self.key_usage[key_name] = {
                'requests_today': 0,
                'last_request_time': 0,
                'is_blocked': False,
                'block_until': None,
                'last_reset_date': current_date,
                'total_requests': 0,
                'success_rate': 1.0,
                'average_response_time': 0
            }

    def get_current_api_config(self) -> Optional[Dict[str, str]]:
        """Retorna configura√ß√£o da API atual dispon√≠vel"""

        if not self.api_keys:
            logger.error("‚ùå Nenhuma chave de API do Google configurada")
            return None

        # Reseta contadores di√°rios se necess√°rio
        self._reset_daily_counters_if_needed()

        # Procura chave dispon√≠vel
        attempts = 0
        while attempts < len(self.api_keys):
            current_config = self.api_keys[self.current_key_index]
            key_name = current_config['name']
            usage = self.key_usage[key_name]

            # Verifica se a chave est√° dispon√≠vel
            if self._is_key_available(key_name):
                logger.debug(f"‚úÖ Usando chave Google: {key_name}")
                return current_config
            else:
                logger.debug(f"‚ö†Ô∏è Chave {key_name} n√£o dispon√≠vel, rotacionando...")
                self._rotate_to_next_key()
                attempts += 1

        # Se todas as chaves est√£o bloqueadas
        logger.error("‚ùå Todas as chaves do Google est√£o temporariamente bloqueadas")
        return self._get_least_used_key()

    def _is_key_available(self, key_name: str) -> bool:
        """Verifica se uma chave est√° dispon√≠vel"""
        usage = self.key_usage[key_name]
        current_time = time.time()

        # Verifica se est√° bloqueada temporariamente
        if usage['is_blocked'] and usage['block_until']:
            if current_time < usage['block_until']:
                return False
            else:
                # Remove bloqueio expirado
                usage['is_blocked'] = False
                usage['block_until'] = None

        # Verifica limite di√°rio
        if usage['requests_today'] >= self.max_requests_per_key:
            logger.warning(f"‚ö†Ô∏è Chave {key_name} atingiu limite di√°rio")
            return False

        # Verifica rate limit (1 request por segundo)
        if current_time - usage['last_request_time'] < 1.0:
            return False

        return True

    def _rotate_to_next_key(self):
        """Rotaciona para pr√≥xima chave"""
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)

    def _get_least_used_key(self) -> Optional[Dict[str, str]]:
        """Retorna a chave menos usada como √∫ltimo recurso"""

        if not self.api_keys:
            return None

        # Encontra chave com menor uso
        min_usage = float('inf')
        least_used_index = 0

        for i, key_config in enumerate(self.api_keys):
            key_name = key_config['name']
            usage = self.key_usage[key_name]['requests_today']

            if usage < min_usage:
                min_usage = usage
                least_used_index = i

        self.current_key_index = least_used_index
        return self.api_keys[least_used_index]

    def record_request(self, key_name: str, success: bool, response_time: float):
        """Registra uso de uma chave"""

        if key_name not in self.key_usage:
            return

        usage = self.key_usage[key_name]
        current_time = time.time()

        # Atualiza contadores
        usage['requests_today'] += 1
        usage['total_requests'] += 1
        usage['last_request_time'] = current_time

        # Atualiza taxa de sucesso
        if success:
            usage['success_rate'] = (usage['success_rate'] * 0.9) + (1.0 * 0.1)
        else:
            usage['success_rate'] = (usage['success_rate'] * 0.9) + (0.0 * 0.1)

        # Atualiza tempo m√©dio de resposta
        usage['average_response_time'] = (usage['average_response_time'] * 0.9) + (response_time * 0.1)

        # Bloqueia temporariamente se muitas falhas
        if usage['success_rate'] < 0.3:
            usage['is_blocked'] = True
            usage['block_until'] = current_time + self.cooldown_period
            logger.warning(f"‚ö†Ô∏è Chave {key_name} bloqueada temporariamente devido a baixa taxa de sucesso")

    def record_rate_limit_hit(self, key_name: str):
        """Registra que uma chave atingiu rate limit"""

        if key_name not in self.key_usage:
            return

        usage = self.key_usage[key_name]
        current_time = time.time()

        # Bloqueia por per√≠odo maior
        usage['is_blocked'] = True
        usage['block_until'] = current_time + (self.cooldown_period * 2)

        logger.warning(f"‚ö†Ô∏è Chave {key_name} atingiu rate limit - bloqueada por 2 horas")

        # Rotaciona imediatamente
        self._rotate_to_next_key()

    def _reset_daily_counters_if_needed(self):
        """Reseta contadores di√°rios se necess√°rio"""
        current_date = datetime.now().date()

        for key_name, usage in self.key_usage.items():
            if usage['last_reset_date'] < current_date:
                usage['requests_today'] = 0
                usage['last_reset_date'] = current_date
                usage['is_blocked'] = False
                usage['block_until'] = None
                logger.info(f"üîÑ Contadores resetados para chave {key_name}")

    def get_usage_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas de uso"""
        stats = {
            'total_keys': len(self.api_keys),
            'current_key': self.api_keys[self.current_key_index]['name'] if self.api_keys else None,
            'keys_status': {}
        }

        for key_config in self.api_keys:
            key_name = key_config['name']
            usage = self.key_usage[key_name]

            stats['keys_status'][key_name] = {
                'requests_today': usage['requests_today'],
                'total_requests': usage['total_requests'],
                'success_rate': round(usage['success_rate'] * 100, 1),
                'average_response_time': round(usage['average_response_time'], 2),
                'is_blocked': usage['is_blocked'],
                'available': self._is_key_available(key_name)
            }

        return stats

    def force_rotate(self):
        """For√ßa rota√ß√£o para pr√≥xima chave"""
        self._rotate_to_next_key()
        logger.info(f"üîÑ Rota√ß√£o for√ßada para chave: {self.api_keys[self.current_key_index]['name']}")

    def unblock_all_keys(self):
        """Remove bloqueio de todas as chaves (para debug)"""
        for usage in self.key_usage.values():
            usage['is_blocked'] = False
            usage['block_until'] = None

        logger.info("üîì Todas as chaves desbloqueadas")

    def get_next_api_key(self):
        """Obt√©m pr√≥xima chave da rota√ß√£o"""
        if not self.api_keys:
            logger.warning("‚ö†Ô∏è Nenhuma chave Google dispon√≠vel")
            return None, None

        key_data = self.api_keys[self.current_index]
        self.current_index = (self.current_index + 1) % len(self.api_keys)

        return key_data.get('api_key'), key_data.get('search_engine_id')

    def get_next_api_keys(self):
        """M√©todo compat√≠vel com c√≥digo existente"""
        return self.get_next_api_key()

# Inst√¢ncia global
google_api_rotation = GoogleAPIRotation()