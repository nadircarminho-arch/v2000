
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Arquiteto do Pr√©-Pitch Invis√≠vel
Sistema baseado no anexo para cria√ß√£o de instala√ß√£o psicol√≥gica profunda
"""

import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class InvisiblePrePitchArchitect:
    """Arquiteto do Pr√©-Pitch Invis√≠vel - Instala√ß√£o Psicol√≥gica Profunda"""

    def __init__(self):
        """Inicializa o arquiteto do pr√©-pitch"""
        self.mental_drives = self._load_mental_drives_library()
        self.pitch_structures = self._load_pitch_structures()
        self.killer_scripts = self._load_killer_scripts()
        logger.info("üéØ Invisible Pre-Pitch Architect inicializado")

    def _load_mental_drives_library(self) -> Dict[str, Any]:
        """Carrega biblioteca completa dos 17 drives mentais"""
        return {
            "oportunidade_oculta": {
                "instalacao": "Existe algo acontecendo que 97% n√£o perceberam...",
                "ativacao": "Lembra quando falei sobre [oportunidade]? √â AGORA ou NUNCA.",
                "quando_usar": "Avatar n√£o percebe mudan√ßa no mercado",
                "intensidade": 8,
                "categoria": "urgencia"
            },
            "ambicao_expandida": {
                "instalacao": "Voc√™ est√° pensando muito pequeno...",
                "ativacao": "Quem aqui ainda est√° se contentando com migalhas?",
                "quando_usar": "Avatar tem metas med√≠ocres",
                "intensidade": 9,
                "categoria": "desejo"
            },
            "diagnostico_brutal": {
                "instalacao": "A verdade d√≥i, mas liberta...",
                "ativacao": "Vamos encarar: voc√™ est√° onde est√° por falta de [recurso]",
                "quando_usar": "Avatar em nega√ß√£o sobre situa√ß√£o",
                "intensidade": 10,
                "categoria": "confronto"
            },
            "indignacao_produtiva": {
                "instalacao": "Isso deveria te revoltar...",
                "ativacao": "Voc√™ vai aceitar isso? S√âRIO MESMO?",
                "quando_usar": "Avatar conformado com mediocridade",
                "intensidade": 9,
                "categoria": "confronto"
            },
            "ambiente_propulsor": {
                "instalacao": "Voc√™ √© a m√©dia das 5 pessoas...",
                "ativacao": "Onde est√£o suas √°guias?",
                "quando_usar": "Avatar cercado de negatividade",
                "intensidade": 7,
                "categoria": "social"
            },
            "metodo_vs_sorte": {
                "instalacao": "Tentar sem m√©todo √© como...",
                "ativacao": "Quer continuar no mato ou pegar a estrada?",
                "quando_usar": "Avatar tentando sozinho sem sistema",
                "intensidade": 8,
                "categoria": "logica"
            },
            "mentor_extrator": {
                "instalacao": "Todo campe√£o teve um treinador...",
                "ativacao": "Quem est√° extraindo seu melhor?",
                "quando_usar": "Avatar orgulhoso/independente demais",
                "intensidade": 8,
                "categoria": "autoridade"
            },
            "coragem_prioritaria": {
                "instalacao": "Dinheiro n√£o √© problema, √© prioridade...",
                "ativacao": "Voc√™ tem medo de qu√™?",
                "quando_usar": "Obje√ß√£o principal √© dinheiro",
                "intensidade": 9,
                "categoria": "objecoes"
            },
            "decisao_vs_condicao": {
                "instalacao": "Existem dois tipos de pessoas...",
                "ativacao": "Voc√™ vive de decis√£o ou desculpa?",
                "quando_usar": "Avatar cheio de desculpas",
                "intensidade": 8,
                "categoria": "acao"
            },
            "antecipacao_massiva": {
                "instalacao": "Tem algo especial vindo...",
                "ativacao": "Lembram do grupo seleto?",
                "quando_usar": "Criar curiosidade sobre oferta",
                "intensidade": 7,
                "categoria": "curiosidade"
            },
            "trofeu_intimo": {
                "instalacao": "No fundo, o que voc√™ quer √©...",
                "ativacao": "Imagine o rosto do seu filho quando...",
                "quando_usar": "Conectar com desejo emocional",
                "intensidade": 10,
                "categoria": "emocional"
            },
            "comprometimento_publico": {
                "instalacao": "Quem est√° comprometido...",
                "ativacao": "Digite EU VOU se est√° pronto",
                "quando_usar": "Aumentar taxa de convers√£o",
                "intensidade": 8,
                "categoria": "compromisso"
            },
            "vilao_comum": {
                "instalacao": "Existe um inimigo comum...",
                "ativacao": "Sabe quem n√£o quer seu sucesso?",
                "quando_usar": "Unir audi√™ncia contra algo",
                "intensidade": 9,
                "categoria": "tribal"
            },
            "prova_viva": {
                "instalacao": "Pessoas como voc√™ conseguiram...",
                "ativacao": "[Nome], levante e conte",
                "quando_usar": "Quebrar ceticismo",
                "intensidade": 9,
                "categoria": "credibilidade"
            },
            "deadline_mental": {
                "instalacao": "O tempo n√£o espera...",
                "ativacao": "Daqui 1 ano voc√™ estar√° onde?",
                "quando_usar": "Avatar procrastinador",
                "intensidade": 8,
                "categoria": "urgencia"
            },
            "exclusividade_tribal": {
                "instalacao": "Nem todos est√£o prontos...",
                "ativacao": "Isso n√£o √© para a massa",
                "quando_usar": "Criar senso de elite",
                "intensidade": 8,
                "categoria": "exclusividade"
            },
            "catarse_emocional": {
                "instalacao": "Existe um momento...",
                "ativacao": "[V√≠deo/Hist√≥ria emocionante]",
                "quando_usar": "Quebrar resist√™ncia l√≥gica",
                "intensidade": 10,
                "categoria": "emocional"
            }
        }

    def _load_pitch_structures(self) -> Dict[str, Any]:
        """Carrega estruturas de pitch dispon√≠veis"""
        return {
            "classica": {
                "nome": "Pitch Cl√°ssico Expandido",
                "duracao": "60-90 min",
                "pre_pitch": "20-30 min",
                "transicao": "5 min",
                "pitch_core": "30-40 min",
                "close_multiplo": "10-15 min",
                "qa_estrategico": "10-15 min",
                "melhor_para": "Audi√™ncia morna/quente, alta complexidade"
            },
            "comprimida": {
                "nome": "Pitch Comprimido Urgente",
                "duracao": "45-60 min",
                "pre_pitch": "15 min",
                "pitch_direto": "20-25 min",
                "close_agressivo": "10-15 min",
                "bonus_drop": "5 min",
                "melhor_para": "Audi√™ncia quente, baixa complexidade"
            },
            "epica": {
                "nome": "Pitch √âpico Imersivo",
                "duracao": "90-120 min",
                "pre_pitch": "30-40 min",
                "pitch_demonstrativo": "40-50 min",
                "close_consultivo": "15-20 min",
                "ultima_chance": "5-10 min",
                "melhor_para": "Audi√™ncia fria, alta convers√£o necess√°ria"
            }
        }

    def _load_killer_scripts(self) -> Dict[str, Any]:
        """Carrega scripts matadores para momentos-chave"""
        return {
            "quebra_objecao_dinheiro": {
                "script": "'N√£o tenho dinheiro' √© a desculpa mais COVARDE que existe.\nVoc√™ tem dinheiro para [item 1], para [item 2], para [item 3].\nMas n√£o tem para VOC√ä?\nN√£o √© falta de dinheiro. √â falta de AMOR PR√ìPRIO.\nQuanto vale sua transforma√ß√£o? R$ 100? R$ 1.000?\nSe n√£o vale [investimento], voc√™ n√£o vale nada para voc√™ mesmo.",
                "momento": "Obje√ß√£o de pre√ßo",
                "intensidade": 10
            },
            "quebra_objecao_tempo": {
                "script": "24 horas. Todo mundo tem.\n- 8 dormindo\n- 8 trabalhando\n- 8 sobrando\nOnde v√£o suas 8 horas?\n2h Netflix + 2h Instagram + 2h reclamando = 6h DESPERDI√áADAS.\nN√£o √© falta de tempo. √â falta de PRIORIDADE.",
                "momento": "Obje√ß√£o de tempo",
                "intensidade": 9
            },
            "criacao_urgencia_mental": {
                "script": "Calculadora. Agora. Sua idade x 365 = dias vividos.\n27.375 (75 anos) - seus dias = dias restantes.\nCada dia procrastinando = dia roubado do futuro.\nQuanto mais voc√™ vai deixar roubarem?",
                "momento": "Criar urg√™ncia",
                "intensidade": 9
            },
            "ativacao_trofeu_intimo": {
                "script": "Fecha os olhos. √â manh√£ de Natal.\nSeu filho abre o presente. O que queria.\n'Obrigado! Voc√™ √© o melhor pai/m√£e do mundo!'\nAgora imagine o contr√°rio.\n'Por que Papai Noel n√£o trouxe?'\nQual cena voc√™ escolhe viver?",
                "momento": "Conectar com desejo profundo",
                "intensidade": 10
            },
            "momento_mentor_catarse": {
                "script": "[LUZES BAIXAS - M√öSICA EMOCIONAL]\n'Um menino. Disseram que n√£o conseguiria.\nFraco demais. Pobre demais.\nUm homem viu o que outros n√£o viam.\n'Chora hoje. Vence amanh√£.'\nEsse menino era eu.\nEsse homem, agora, sou eu para voc√™s.\nMas s√≥ ajudo quem QUER ser ajudado.'",
                "momento": "Estabelecer autoridade emocional",
                "intensidade": 10
            }
        }

    def generate_complete_prepitch(
        self,
        avatar_data: Dict[str, Any],
        pitch_structure: str = "classica",
        target_emotion: str = "transformacao"
    ) -> Dict[str, Any]:
        """Gera pr√©-pitch invis√≠vel completo baseado no avatar"""

        logger.info(f"üéØ Gerando pr√©-pitch invis√≠vel para estrutura {pitch_structure}")

        try:
            # 1. An√°lise inteligente do avatar
            avatar_analysis = self._analyze_avatar_for_drives(avatar_data)

            # 2. Sele√ß√£o personalizada dos 12 drives
            selected_drives = self._select_optimal_drives(avatar_analysis)

            # 3. Estrutura do pr√©-pitch baseada no formato
            prepitch_structure = self._create_prepitch_structure(pitch_structure, selected_drives)

            # 4. Scripts personalizados
            personalized_scripts = self._generate_personalized_scripts(avatar_data, selected_drives)

            # 5. Timeline detalhada
            detailed_timeline = self._create_detailed_timeline(prepitch_structure, personalized_scripts)

            # 6. Elementos visuais e musicais
            audiovisual_elements = self._design_audiovisual_elements(selected_drives)

            # 7. M√©tricas de engajamento
            engagement_metrics = self._define_engagement_metrics(selected_drives)

            return {
                "avatar_analysis": avatar_analysis,
                "selected_drives": selected_drives,
                "prepitch_structure": prepitch_structure,
                "personalized_scripts": personalized_scripts,
                "detailed_timeline": detailed_timeline,
                "audiovisual_elements": audiovisual_elements,
                "engagement_metrics": engagement_metrics,
                "implementation_guide": self._create_implementation_guide(detailed_timeline),
                "backup_scenarios": self._create_backup_scenarios(selected_drives),
                "conversion_predictions": self._predict_conversion_rates(avatar_analysis, selected_drives)
            }

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar pr√©-pitch: {e}")
            return self._fallback_prepitch(avatar_data)

    def _analyze_avatar_for_drives(self, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analisa avatar para mapear drives ideais"""

        # Extrai caracter√≠sticas do avatar
        dores = avatar_data.get('dores_principais', [])
        medos = avatar_data.get('medos_secretos', [])
        desejos = avatar_data.get('desejos_secretos', [])
        objecoes = avatar_data.get('muralhas_desconfianca_objecoes', [])
        temperatura = avatar_data.get('temperatura_emocional', 'morna')

        analysis = {
            "perfil_psicologico": {
                "dominante_dor": self._identify_dominant_pain(dores),
                "medo_principal": self._identify_main_fear(medos),
                "desejo_primario": self._identify_primary_desire(desejos),
                "objecao_critica": self._identify_critical_objection(objecoes),
                "temperatura_atual": temperatura
            },
            "drives_recomendados": {
                "para_dores": self._map_drives_for_pains(dores),
                "para_medos": self._map_drives_for_fears(medos),
                "para_desejos": self._map_drives_for_desires(desejos),
                "para_objecoes": self._map_drives_for_objections(objecoes),
                "para_temperatura": self._map_drives_for_temperature(temperatura)
            },
            "estrategia_emocional": {
                "intensidade_recomendada": self._calculate_recommended_intensity(avatar_data),
                "sequencia_otima": self._determine_optimal_sequence(avatar_data),
                "pontos_resistencia": self._identify_resistance_points(avatar_data)
            }
        }

        return analysis

    def _select_optimal_drives(self, avatar_analysis: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Seleciona os 12 drives mais devastadores para o avatar"""

        # Coleta todos os drives recomendados
        recommended_drives = []
        for category, drives in avatar_analysis["drives_recomendados"].items():
            for drive in drives:
                if drive not in [d["nome"] for d in recommended_drives]:
                    drive_data = self.mental_drives[drive].copy()
                    drive_data["nome"] = drive
                    drive_data["categoria_origem"] = category
                    drive_data["score"] = self._calculate_drive_score(drive, avatar_analysis)
                    recommended_drives.append(drive_data)

        # Ordena por score e seleciona os 12 melhores
        recommended_drives.sort(key=lambda x: x["score"], reverse=True)
        selected_drives = recommended_drives[:12]

        # Adiciona justificativa para cada drive
        for drive in selected_drives:
            drive["justificativa"] = self._generate_drive_justification(drive, avatar_analysis)
            drive["timing_otimo"] = self._calculate_optimal_timing(drive, avatar_analysis)

        return selected_drives

    def _create_prepitch_structure(
        self,
        structure_type: str,
        selected_drives: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Cria estrutura do pr√©-pitch baseada no tipo escolhido"""

        base_structure = self.pitch_structures[structure_type]
        prepitch_duration = int(base_structure["pre_pitch"].split()[0])

        if structure_type == "classica":
            return self._create_classic_structure(prepitch_duration, selected_drives)
        elif structure_type == "comprimida":
            return self._create_compressed_structure(prepitch_duration, selected_drives)
        elif structure_type == "epica":
            return self._create_epic_structure(prepitch_duration, selected_drives)

    def _create_classic_structure(self, duration: int, drives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria estrutura cl√°ssica de 25 minutos"""

        return {
            "tipo": "Cl√°ssica",
            "duracao_total": 25,
            "fases": {
                "abertura_impactante": {
                    "tempo": "00:00-03:00",
                    "duracao": 3,
                    "drives": [drives[0]["nome"], drives[1]["nome"]],
                    "objetivo": "Destruir ilus√£o e criar tens√£o",
                    "energia": "Calma crescendo para tens√£o",
                    "elementos": ["Dado chocante", "Estat√≠stica impactante"]
                },
                "expansao_desejo": {
                    "tempo": "03:00-06:00",
                    "duracao": 3,
                    "drives": [drives[2]["nome"], drives[3]["nome"]],
                    "objetivo": "Expandir vis√£o e conectar com sonhos",
                    "energia": "Inspiracional crescente",
                    "elementos": ["Visualiza√ß√£o", "M√∫sica inspiracional"]
                },
                "confronto_realidade": {
                    "tempo": "06:00-10:00",
                    "duracao": 4,
                    "drives": [drives[4]["nome"], drives[5]["nome"], drives[6]["nome"]],
                    "objetivo": "Confrontar situa√ß√£o atual",
                    "energia": "Confrontadora mas emp√°tica",
                    "elementos": ["Calend√°rio/rel√≥gio", "Espelho da realidade"]
                },
                "inimigo_revelado": {
                    "tempo": "10:00-13:00",
                    "duracao": 3,
                    "drives": [drives[7]["nome"], drives[8]["nome"]],
                    "objetivo": "Revelar vil√£o comum",
                    "energia": "Tens√£o/conspira√ß√£o",
                    "elementos": ["Exposi√ß√£o do esquema", "M√∫sica tensa"]
                },
                "possibilidade_real": {
                    "tempo": "13:00-16:00",
                    "duracao": 3,
                    "drives": [drives[9]["nome"], drives[10]["nome"]],
                    "objetivo": "Mostrar possibilidade real",
                    "energia": "Esperan√ßosa crescente",
                    "elementos": ["Case ao vivo", "Prova social"]
                },
                "momento_verdade": {
                    "tempo": "16:00-18:00",
                    "duracao": 2,
                    "drives": [drives[11]["nome"]],
                    "objetivo": "For√ßar decis√£o interna",
                    "energia": "√âpica de batalha",
                    "elementos": ["Compromisso p√∫blico", "M√∫sica √©pica"]
                },
                "plano_matematico": {
                    "tempo": "18:00-21:00",
                    "duracao": 3,
                    "drives": ["metodo_vs_sorte"],
                    "objetivo": "Provar viabilidade matem√°tica",
                    "energia": "L√≥gica convincente",
                    "elementos": ["Quadro", "Calculadora ao vivo"]
                },
                "evidencias_irrefutaveis": {
                    "tempo": "21:00-23:00",
                    "duracao": 2,
                    "drives": ["prova_viva"],
                    "objetivo": "Apresentar evid√™ncias finais",
                    "energia": "Convic√ß√£o absoluta",
                    "elementos": ["Gr√°ficos", "Estat√≠sticas"]
                },
                "ponte_perfeita": {
                    "tempo": "23:00-25:00",
                    "duracao": 2,
                    "drives": ["antecipacao_massiva"],
                    "objetivo": "Transi√ß√£o para oferta",
                    "energia": "Urg√™ncia m√°xima",
                    "elementos": ["Ponte para pitch", "Anticipa√ß√£o"]
                }
            }
        }

    def _create_compressed_structure(self, duration: int, drives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria estrutura comprimida de 15 minutos"""

        return {
            "tipo": "Comprimida",
            "duracao_total": 15,
            "fases": {
                "quebra_realidade": {
                    "tempo": "00:00-02:00",
                    "duracao": 2,
                    "drives": [drives[0]["nome"], drives[1]["nome"], drives[2]["nome"]],
                    "objetivo": "Quebrar realidade imediatamente",
                    "energia": "Impacto m√°ximo",
                    "script_exemplo": "Voc√™ tem 15 minutos para mudar sua vida. Literalmente."
                },
                "prova_relampago": {
                    "tempo": "02:00-05:00",
                    "duracao": 3,
                    "drives": [drives[3]["nome"], drives[4]["nome"]],
                    "objetivo": "Provas r√°pidas e contundentes",
                    "energia": "Evid√™ncia bombardeada",
                    "elementos": ["3 cases de 30s cada"]
                },
                "expansao_urgente": {
                    "tempo": "05:00-08:00",
                    "duracao": 3,
                    "drives": [drives[5]["nome"], drives[6]["nome"], drives[7]["nome"]],
                    "objetivo": "Expandir urg√™ncia e desejo",
                    "energia": "Press√£o crescente",
                    "elementos": ["Compara√ß√£o temporal"]
                },
                "decisao_forcada": {
                    "tempo": "08:00-11:00",
                    "duracao": 3,
                    "drives": [drives[8]["nome"], drives[9]["nome"]],
                    "objetivo": "For√ßar decis√£o bin√°ria",
                    "energia": "Confronto direto",
                    "elementos": ["Separa√ß√£o tribal"]
                },
                "evidencia_rapida": {
                    "tempo": "11:00-13:00",
                    "duracao": 2,
                    "drives": [drives[10]["nome"]],
                    "objetivo": "Evid√™ncia l√≥gica r√°pida",
                    "energia": "L√≥gica irrefut√°vel",
                    "elementos": ["3 dados r√°pidos"]
                },
                "transicao_explosiva": {
                    "tempo": "13:00-15:00",
                    "duracao": 2,
                    "drives": [drives[11]["nome"]],
                    "objetivo": "Transi√ß√£o explosiva para oferta",
                    "energia": "Anticipa√ß√£o m√°xima",
                    "elementos": ["Abertura das portas"]
                }
            }
        }

    def _create_epic_structure(self, duration: int, drives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria estrutura √©pica de 35 minutos"""

        return {
            "tipo": "√âpica",
            "duracao_total": 35,
            "fases": {
                "abertura_hollywoodiana": {
                    "tempo": "00:00-05:00",
                    "duracao": 5,
                    "drives": ["catarse_emocional"],
                    "objetivo": "Experi√™ncia cinematogr√°fica",
                    "energia": "Emocional m√°xima",
                    "elementos": ["V√≠deo 2-3 min", "Hist√≥ria √©pica"]
                },
                "jornada_heroi": {
                    "tempo": "05:00-12:00",
                    "duracao": 7,
                    "drives": [drives[0]["nome"], drives[1]["nome"], drives[2]["nome"]],
                    "objetivo": "Jornada do her√≥i completa",
                    "energia": "Narrativa envolvente",
                    "elementos": ["Mundo comum", "Chamado", "Mentor"]
                },
                "demonstracao_poder": {
                    "tempo": "12:00-20:00",
                    "duracao": 8,
                    "drives": [drives[3]["nome"], drives[4]["nome"], drives[5]["nome"]],
                    "objetivo": "Demonstra√ß√£o do m√©todo",
                    "energia": "Prova absoluta",
                    "elementos": ["Demo ao vivo", "M√∫ltiplos cases"]
                },
                "construcao_elite": {
                    "tempo": "20:00-27:00",
                    "duracao": 7,
                    "drives": [drives[6]["nome"], drives[7]["nome"], drives[8]["nome"]],
                    "objetivo": "Criar senso de elite",
                    "energia": "Tribal intensa",
                    "elementos": ["Separa√ß√£o", "Nova identidade"]
                },
                "preparacao_logica": {
                    "tempo": "27:00-32:00",
                    "duracao": 5,
                    "drives": [drives[9]["nome"], drives[10]["nome"]],
                    "objetivo": "Prepara√ß√£o l√≥gica final",
                    "energia": "Convic√ß√£o racional",
                    "elementos": ["Matem√°tica", "ROI"]
                },
                "chamado_final": {
                    "tempo": "32:00-35:00",
                    "duracao": 3,
                    "drives": [drives[11]["nome"]],
                    "objetivo": "Chamado final √©pico",
                    "energia": "Climax emocional",
                    "elementos": ["Abertura das portas"]
                }
            }
        }

    def _generate_personalized_scripts(
        self,
        avatar_data: Dict[str, Any],
        selected_drives: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Gera scripts personalizados baseados no avatar"""

        segmento = avatar_data.get('segmento', 'empreendedor')
        principal_dor = avatar_data.get('dores_principais', ['crescimento lento'])[0]
        principal_desejo = avatar_data.get('desejos_secretos', ['sucesso'])[0]

        personalized_scripts = {}

        for drive in selected_drives:
            drive_name = drive["nome"]
            base_drive = self.mental_drives[drive_name]

            # Personaliza script de instala√ß√£o
            instalacao = base_drive["instalacao"].replace("[segmento]", segmento)
            instalacao = instalacao.replace("[dor]", principal_dor)
            instalacao = instalacao.replace("[desejo]", principal_desejo)

            # Personaliza script de ativa√ß√£o
            ativacao = base_drive["ativacao"].replace("[segmento]", segmento)
            ativacao = ativacao.replace("[dor]", principal_dor)
            ativacao = ativacao.replace("[desejo]", principal_desejo)

            personalized_scripts[drive_name] = {
                "instalacao_personalizada": instalacao,
                "ativacao_personalizada": ativacao,
                "contexto_avatar": f"Para {segmento} com dor '{principal_dor}' e desejo '{principal_desejo}'",
                "momento_ideal": drive["timing_otimo"],
                "intensidade_recomendada": drive["intensidade"]
            }

        # Adiciona scripts matadores personalizados
        for script_name, script_data in self.killer_scripts.items():
            script_personalizado = script_data["script"]
            script_personalizado = script_personalizado.replace("[segmento]", segmento)
            script_personalizado = script_personalizado.replace("[dor]", principal_dor)

            personalized_scripts[f"killer_{script_name}"] = {
                "script_completo": script_personalizado,
                "momento": script_data["momento"],
                "intensidade": script_data["intensidade"]
            }

        return personalized_scripts

    def _create_detailed_timeline(
        self,
        structure: Dict[str, Any],
        scripts: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Cria timeline detalhada com scripts espec√≠ficos"""

        detailed_timeline = {
            "estrutura": structure["tipo"],
            "duracao_total": f"{structure['duracao_total']} minutos",
            "fases_detalhadas": {}
        }

        for fase_name, fase_data in structure["fases"].items():
            detailed_timeline["fases_detalhadas"][fase_name] = {
                **fase_data,
                "scripts_especificos": [],
                "transicoes": [],
                "elementos_visuais": [],
                "elementos_sonoros": []
            }

            # Adiciona scripts espec√≠ficos para cada drive da fase
            for drive in fase_data.get("drives", []):
                if drive in scripts:
                    detailed_timeline["fases_detalhadas"][fase_name]["scripts_especificos"].append({
                        "drive": drive,
                        "instalacao": scripts[drive]["instalacao_personalizada"],
                        "ativacao": scripts[drive]["ativacao_personalizada"],
                        "timing": scripts[drive]["momento_ideal"]
                    })

            # Adiciona transi√ß√µes suaves
            detailed_timeline["fases_detalhadas"][fase_name]["transicoes"] = self._create_phase_transitions(fase_name, fase_data)

        return detailed_timeline

    def _design_audiovisual_elements(self, selected_drives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Projeta elementos audiovisuais para maximizar impacto"""

        return {
            "elementos_visuais": {
                "slides_impacto": [
                    "Estat√≠sticas chocantes com n√∫meros grandes",
                    "Compara√ß√µes visuais antes/depois",
                    "Gr√°ficos de crescimento exponencial",
                    "Fotos emocionais (fam√≠lia, sonhos)",
                    "Calend√°rio com dias riscados"
                ],
                "demonstracoes_ao_vivo": [
                    "Calculadora de oportunidade perdida",
                    "Simulador de resultados",
                    "Compara√ß√£o de cen√°rios"
                ],
                "elementos_cenicos": [
                    "Lighting dram√°tico para momentos-chave",
                    "Props f√≠sicos (rel√≥gio, calend√°rio)",
                    "Quadro/flipchart para matem√°tica ao vivo"
                ]
            },
            "elementos_sonoros": {
                "trilha_sonora": {
                    "abertura": "√âpica/Misteriosa",
                    "confronto": "Tensa/Dram√°tica",
                    "inspiracao": "Elevada/Motivacional",
                    "urgencia": "Intensa/R√°pida",
                    "climax": "√âpica/Transformadora"
                },
                "efeitos_sonoros": [
                    "Tique-taque de rel√≥gio para urg√™ncia",
                    "Som de notifica√ß√£o para alertas",
                    "Sil√™ncio dram√°tico antes de revela√ß√µes"
                ]
            },
            "interatividade": {
                "momentos_participacao": [
                    "Escrever novo objetivo 10x maior",
                    "Calcular dias de vida restantes",
                    "Levantar m√£o para compromissos",
                    "Chat com 'EU VOU' ou similar"
                ],
                "elementos_urgencia": [
                    "Timer vis√≠vel contando",
                    "Contador de pessoas conectadas",
                    "Vagas dispon√≠veis diminuindo"
                ]
            }
        }

    def _define_engagement_metrics(self, selected_drives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Define m√©tricas para medir engajamento durante o pr√©-pitch"""

        return {
            "metricas_emociais": {
                "reacoes_chat": ["üî•", "üíØ", "üò±", "üí™", "üëè"],
                "palavras_chave_positivas": ["SIM", "QUERO", "EU VOU", "PRECISO"],
                "indicadores_urgencia": ["AGORA", "HOJE", "J√Å"],
                "sinais_resistencia": ["MAS", "POR√âM", "CARO", "DIF√çCIL"]
            },
            "metricas_comportamentais": {
                "tempo_tela": "M√≠nimo 90% do tempo",
                "interacoes": "Pelo menos 3 participa√ß√µes",
                "permanencia": "At√© o final do pr√©-pitch",
                "engajamento_picos": "Momentos de maior atividade"
            },
            "indicadores_conversao": {
                "nivel_1_interesse": "Participa√ß√£o ativa",
                "nivel_2_engajamento": "M√∫ltiplas intera√ß√µes",
                "nivel_3_urgencia": "Demonstra pressa/urg√™ncia",
                "nivel_4_pronto": "Pede informa√ß√µes sobre oferta"
            }
        }

    def _create_implementation_guide(self, timeline: Dict[str, Any]) -> Dict[str, Any]:
        """Cria guia de implementa√ß√£o pr√°tico"""

        return {
            "preparacao_evento": {
                "24h_antes": [
                    "Testar todos os equipamentos audiovisuais",
                    "Preparar props f√≠sicos (rel√≥gio, calculadora)",
                    "Ensaiar transi√ß√µes entre fases",
                    "Configurar sistema de chat/intera√ß√£o"
                ],
                "2h_antes": [
                    "Verificar internet e backup",
                    "Testar slides e v√≠deos",
                    "Aquecer voz e energia",
                    "Revisar scripts principais"
                ],
                "30min_antes": [
                    "Entrar no estado emocional correto",
                    "Verificar chat e engagement tools",
                    "Preparar primeira frase impactante"
                ]
            },
            "execucao_live": {
                "energy_management": "Come√ßar 7/10, subir para 10/10 nos momentos-chave",
                "timing_control": "Usar cron√¥metro vis√≠vel, respeitar tempos",
                "audience_reading": "Observar chat e ajustar intensidade",
                "backup_plans": "Scripts alternativos para baixo engajamento"
            },
            "pos_evento": {
                "imediato": [
                    "Capturar dados de engajamento",
                    "Identificar leads quentes",
                    "Salvar grava√ß√£o para an√°lise"
                ],
                "24h_depois": [
                    "Analisar m√©tricas de convers√£o",
                    "Ajustar scripts baseado no feedback",
                    "Preparar follow-up para interessados"
                ]
            }
        }

    def _create_backup_scenarios(self, selected_drives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria cen√°rios de backup para situa√ß√µes imprevistas"""

        return {
            "baixo_engajamento": {
                "sinais": "Chat quieto, poucas rea√ß√µes",
                "acao": "Intensificar confronto, usar drives mais agressivos",
                "scripts_emergencia": [
                    "Vou parar aqui. Quem realmente quer mudar de vida?",
                    "Se voc√™s n√£o est√£o engajados, eu tamb√©m n√£o vou estar",
                    "√öltima chance: quem quer resultados diferentes?"
                ]
            },
            "resistencia_alta": {
                "sinais": "Coment√°rios negativos, obje√ß√µes no chat",
                "acao": "Usar drives de prova social e autoridade",
                "estrategia": "Mostrar mais cases, intensificar credibilidade"
            },
            "problemas_tecnicos": {
                "sem_slides": "Continuar apenas com fala, usar quadro f√≠sico",
                "sem_audio": "Usar chat intensivamente, slides mais visuais",
                "sem_internet": "Modo offline preparado com conte√∫do local"
            },
            "interrupcoes": {
                "perguntas_fora_hora": "Anotar para responder depois",
                "trolls_chat": "Ignorar ou banir rapidamente",
                "tempo_estourando": "Comprimir fases menos cr√≠ticas"
            }
        }

    def _predict_conversion_rates(
        self,
        avatar_analysis: Dict[str, Any],
        selected_drives: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Prediz taxas de convers√£o baseadas no setup"""

        # Calcula score baseado em m√∫ltiplos fatores
        avatar_score = self._calculate_avatar_alignment_score(avatar_analysis)
        drives_score = self._calculate_drives_effectiveness_score(selected_drives)
        structure_score = 0.8  # Assumindo estrutura bem executada

        overall_score = (avatar_score * 0.4 + drives_score * 0.4 + structure_score * 0.2)

        return {
            "expectativa_conversao": {
                "cenario_conservador": f"{max(overall_score * 20, 5):.1f}%",
                "cenario_realista": f"{overall_score * 35:.1f}%",
                "cenario_otimista": f"{min(overall_score * 50, 65):.1f}%"
            },
            "fatores_impacto": {
                "alinhamento_avatar": f"{avatar_score * 100:.1f}%",
                "efetividade_drives": f"{drives_score * 100:.1f}%",
                "qualidade_execucao": f"{structure_score * 100:.1f}%"
            },
            "melhorias_sugeridas": self._suggest_conversion_improvements(overall_score),
            "benchmarks": {
                "pre_pitch_medio": "15-25%",
                "pre_pitch_bom": "25-40%",
                "pre_pitch_excepcional": "40-60%",
                "seu_potencial": f"{overall_score * 35:.1f}%"
            }
        }

    # M√©todos auxiliares para c√°lculos
    def _identify_dominant_pain(self, dores: List[str]) -> str:
        """Identifica dor dominante"""
        return dores[0] if dores else "crescimento lento"

    def _identify_main_fear(self, medos: List[str]) -> str:
        """Identifica medo principal"""
        return medos[0] if medos else "fracasso"

    def _identify_primary_desire(self, desejos: List[str]) -> str:
        """Identifica desejo prim√°rio"""
        return desejos[0] if desejos else "sucesso"

    def _identify_critical_objection(self, objecoes: List[str]) -> str:
        """Identifica obje√ß√£o cr√≠tica"""
        return objecoes[0] if objecoes else "pre√ßo"

    def _map_drives_for_pains(self, dores: List[str]) -> List[str]:
        """Mapeia drives para dores espec√≠ficas"""
        drive_mapping = {
            "crescimento lento": ["diagnostico_brutal", "indignacao_produtiva", "deadline_mental"],
            "falta de clientes": ["vilao_comum", "metodo_vs_sorte", "prova_viva"],
            "baixa receita": ["ambicao_expandida", "trofeu_intimo", "coragem_prioritaria"],
            "falta de sistema": ["mentor_extrator", "metodo_vs_sorte", "ambiente_propulsor"]
        }
        
        mapped_drives = []
        for dor in dores:
            for key, drives in drive_mapping.items():
                if key.lower() in dor.lower():
                    mapped_drives.extend(drives)
        
        return list(set(mapped_drives)) if mapped_drives else ["diagnostico_brutal", "metodo_vs_sorte"]

    def _map_drives_for_fears(self, medos: List[str]) -> List[str]:
        """Mapeia drives para medos espec√≠ficos"""
        fear_mapping = {
            "fracasso": ["prova_viva", "mentor_extrator", "decisao_vs_condicao"],
            "investimento": ["coragem_prioritaria", "trofeu_intimo", "deadline_mental"],
            "tempo": ["deadline_mental", "oportunidade_oculta", "decisao_vs_condicao"],
            "julgamento": ["exclusividade_tribal", "ambiente_propulsor", "vilao_comum"]
        }
        
        mapped_drives = []
        for medo in medos:
            for key, drives in fear_mapping.items():
                if key.lower() in medo.lower():
                    mapped_drives.extend(drives)
        
        return list(set(mapped_drives)) if mapped_drives else ["coragem_prioritaria", "decisao_vs_condicao"]

    def _map_drives_for_desires(self, desejos: List[str]) -> List[str]:
        """Mapeia drives para desejos espec√≠ficos"""
        desire_mapping = {
            "liberdade": ["trofeu_intimo", "ambicao_expandida", "exclusividade_tribal"],
            "reconhecimento": ["prova_viva", "exclusividade_tribal", "ambiente_propulsor"],
            "crescimento": ["ambicao_expandida", "oportunidade_oculta", "metodo_vs_sorte"],
            "seguran√ßa": ["prova_viva", "mentor_extrator", "coragem_prioritaria"]
        }
        
        mapped_drives = []
        for desejo in desejos:
            for key, drives in desire_mapping.items():
                if key.lower() in desejo.lower():
                    mapped_drives.extend(drives)
        
        return list(set(mapped_drives)) if mapped_drives else ["ambicao_expandida", "trofeu_intimo"]

    def _map_drives_for_objections(self, objecoes: List[str]) -> List[str]:
        """Mapeia drives para obje√ß√µes espec√≠ficas"""
        objection_mapping = {
            "pre√ßo": ["coragem_prioritaria", "trofeu_intimo", "deadline_mental"],
            "tempo": ["deadline_mental", "decisao_vs_condicao", "oportunidade_oculta"],
            "ceticismo": ["prova_viva", "mentor_extrator", "metodo_vs_sorte"],
            "complexidade": ["metodo_vs_sorte", "mentor_extrator", "prova_viva"]
        }
        
        mapped_drives = []
        for objecao in objecoes:
            for key, drives in objection_mapping.items():
                if key.lower() in objecao.lower():
                    mapped_drives.extend(drives)
        
        return list(set(mapped_drives)) if mapped_drives else ["coragem_prioritaria", "prova_viva"]

    def _map_drives_for_temperature(self, temperatura: str) -> List[str]:
        """Mapeia drives para temperatura da audi√™ncia"""
        temperature_mapping = {
            "fria": ["catarse_emocional", "prova_viva", "oportunidade_oculta"],
            "morna": ["diagnostico_brutal", "ambicao_expandida", "trofeu_intimo"],
            "quente": ["decisao_vs_condicao", "comprometimento_publico", "antecipacao_massiva"]
        }
        
        return temperature_mapping.get(temperatura, ["diagnostico_brutal", "prova_viva"])

    def _calculate_recommended_intensity(self, avatar_data: Dict[str, Any]) -> int:
        """Calcula intensidade recomendada (1-10)"""
        temperatura = avatar_data.get('temperatura_emocional', 'morna')
        resistencia = len(avatar_data.get('muralhas_desconfianca_objecoes', []))
        
        base_intensity = {
            'fria': 6,
            'morna': 8,
            'quente': 9
        }.get(temperatura, 7)
        
        # Ajusta baseado na resist√™ncia
        intensity = base_intensity + min(resistencia, 2)
        
        return min(intensity, 10)

    def _determine_optimal_sequence(self, avatar_data: Dict[str, Any]) -> List[str]:
        """Determina sequ√™ncia √≥tima de drives"""
        temperatura = avatar_data.get('temperatura_emocional', 'morna')
        
        if temperatura == 'fria':
            return ['emocional', 'credibilidade', 'logica', 'acao']
        elif temperatura == 'morna':
            return ['confronto', 'emocional', 'credibilidade', 'acao']
        else:  # quente
            return ['confronto', 'acao', 'urgencia', 'exclusividade']

    def _identify_resistance_points(self, avatar_data: Dict[str, Any]) -> List[str]:
        """Identifica pontos de resist√™ncia"""
        objecoes = avatar_data.get('muralhas_desconfianca_objecoes', [])
        medos = avatar_data.get('medos_secretos', [])
        
        resistance_points = []
        
        # Mapeia obje√ß√µes para pontos de resist√™ncia
        for objecao in objecoes:
            if 'pre√ßo' in objecao.lower() or 'caro' in objecao.lower():
                resistance_points.append('investimento_financeiro')
            elif 'tempo' in objecao.lower():
                resistance_points.append('disponibilidade_tempo')
            elif 'funciona' in objecao.lower() or 'resultado' in objecao.lower():
                resistance_points.append('ceticismo_metodologia')
        
        return resistance_points

    def _calculate_drive_score(self, drive_name: str, avatar_analysis: Dict[str, Any]) -> float:
        """Calcula score de relev√¢ncia do drive para o avatar"""
        drive_data = self.mental_drives[drive_name]
        
        # Score base da intensidade do drive
        base_score = drive_data["intensidade"] / 10
        
        # Bonus se o drive aparece em m√∫ltiplas categorias recomendadas
        recommendations = avatar_analysis["drives_recomendados"]
        appearance_count = sum(1 for drives in recommendations.values() if drive_name in drives)
        appearance_bonus = appearance_count * 0.2
        
        # Bonus baseado na categoria do drive vs necessidades do avatar
        category_bonus = self._calculate_category_alignment(drive_data["categoria"], avatar_analysis)
        
        total_score = base_score + appearance_bonus + category_bonus
        return min(total_score, 1.0)

    def _calculate_category_alignment(self, drive_category: str, avatar_analysis: Dict[str, Any]) -> float:
        """Calcula alinhamento da categoria do drive com necessidades do avatar"""
        temperatura = avatar_analysis["perfil_psicologico"]["temperatura_atual"]
        
        category_alignment = {
            'fria': {
                'emocional': 0.3,
                'credibilidade': 0.2,
                'logica': 0.1,
                'confronto': 0.0
            },
            'morna': {
                'confronto': 0.3,
                'emocional': 0.2,
                'credibilidade': 0.1,
                'urgencia': 0.1
            },
            'quente': {
                'acao': 0.3,
                'urgencia': 0.2,
                'exclusividade': 0.1,
                'compromisso': 0.1
            }
        }
        
        return category_alignment.get(temperatura, {}).get(drive_category, 0.05)

    def _generate_drive_justification(self, drive: Dict[str, Any], avatar_analysis: Dict[str, Any]) -> str:
        """Gera justificativa para sele√ß√£o do drive"""
        perfil = avatar_analysis["perfil_psicologico"]
        
        justification_templates = {
            'confronto': f"Necess√°rio para quebrar nega√ß√£o sobre '{perfil['dominante_dor']}'",
            'emocional': f"Conecta com desejo profundo por '{perfil['desejo_primario']}'",
            'credibilidade': f"Reduz ceticismo e medo de '{perfil['medo_principal']}'",
            'urgencia': f"Combate procrastina√ß√£o t√≠pica de audi√™ncia '{perfil['temperatura_atual']}'",
            'acao': f"For√ßa decis√£o para superar obje√ß√£o '{perfil['objecao_critica']}'",
            'exclusividade': f"Cria senso de elite para audi√™ncia '{perfil['temperatura_atual']}'"
        }
        
        return justification_templates.get(drive["categoria"], f"Drive complementar para perfil {perfil['temperatura_atual']}")

    def _calculate_optimal_timing(self, drive: Dict[str, Any], avatar_analysis: Dict[str, Any]) -> str:
        """Calcula timing √≥timo para o drive"""
        categoria = drive["categoria"]
        temperatura = avatar_analysis["perfil_psicologico"]["temperatura_atual"]
        
        timing_map = {
            'fria': {
                'emocional': 'in√≠cio',
                'credibilidade': 'meio',
                'logica': 'final',
                'confronto': 'evitar'
            },
            'morna': {
                'confronto': 'in√≠cio',
                'emocional': 'meio',
                'credibilidade': 'meio',
                'acao': 'final'
            },
            'quente': {
                'confronto': 'in√≠cio',
                'acao': 'meio',
                'urgencia': 'final',
                'exclusividade': 'final'
            }
        }
        
        return timing_map.get(temperatura, {}).get(categoria, 'meio')

    def _create_phase_transitions(self, fase_name: str, fase_data: Dict[str, Any]) -> List[str]:
        """Cria transi√ß√µes suaves entre fases"""
        transitions = {
            'abertura_impactante': [
                "Agora que voc√™ viu a realidade nua e crua...",
                "Mas calma, n√£o vim aqui s√≥ para te deixar mal..."
            ],
            'expansao_desejo': [
                "Agora que voc√™ expandiu sua vis√£o...",
                "Mas existe um problema..."
            ],
            'confronto_realidade': [
                "E por que voc√™ n√£o conseguiu ainda?",
                "Deixa eu te mostrar o verdadeiro culpado..."
            ],
            'inimigo_revelado': [
                "Mas nem tudo est√° perdido...",
                "Existe uma sa√≠da, e vou te mostrar..."
            ],
            'possibilidade_real': [
                "A pergunta agora √© simples...",
                "Voc√™ est√° pronto para a verdade?"
            ]
        }
        
        return transitions.get(fase_name, ["Agora...", "Ent√£o..."])

    def _calculate_avatar_alignment_score(self, avatar_analysis: Dict[str, Any]) -> float:
        """Calcula score de alinhamento com avatar"""
        # Fatores que contribuem para o alinhamento
        temperatura_score = {
            'fria': 0.6,
            'morna': 0.8,
            'quente': 0.9
        }.get(avatar_analysis["perfil_psicologico"]["temperatura_atual"], 0.7)
        
        drives_match = len(avatar_analysis["drives_recomendados"]["para_dores"]) / 5  # Normaliza para 0-1
        
        return (temperatura_score + drives_match) / 2

    def _calculate_drives_effectiveness_score(self, selected_drives: List[Dict[str, Any]]) -> float:
        """Calcula score de efetividade dos drives selecionados"""
        intensidade_media = sum(drive["intensidade"] for drive in selected_drives) / len(selected_drives) / 10
        
        # Bonus para diversidade de categorias
        categorias = set(drive["categoria"] for drive in selected_drives)
        diversidade_bonus = len(categorias) / 6  # 6 categorias principais
        
        return (intensidade_media + diversidade_bonus) / 2

    def _suggest_conversion_improvements(self, overall_score: float) -> List[str]:
        """Sugere melhorias para aumentar convers√£o"""
        if overall_score < 0.5:
            return [
                "Intensificar drives emocionais",
                "Adicionar mais provas sociais",
                "Melhorar alinhamento com avatar",
                "Aumentar urg√™ncia e escassez"
            ]
        elif overall_score < 0.7:
            return [
                "Refinar timing dos drives",
                "Personalizar scripts ainda mais",
                "Adicionar elementos visuais impactantes"
            ]
        else:
            return [
                "Otimizar transi√ß√µes entre fases",
                "Testar varia√ß√µes de intensidade",
                "Adicionar elementos de gamifica√ß√£o"
            ]

    def _fallback_prepitch(self, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Pr√©-pitch b√°sico como fallback"""
        return {
            "tipo": "Pr√©-pitch B√°sico",
            "drives_selecionados": ["diagnostico_brutal", "prova_viva", "trofeu_intimo"],
            "estrutura": "Simples de 15 minutos",
            "expectativa_conversao": "15-25%"
        }

# Inst√¢ncia global
invisible_prepitch_architect = InvisiblePrePitchArchitect()
